// app.js

const express = require("express");
const mongoose = require("mongoose");
const app = express();

// Middleware to parse JSON bodies
app.use(express.json());

console.log("üîÑ Starting Banking Transfer System...");

// =============================
// MIDDLEWARE: Request Logging
// =============================
const loggingMiddleware = (req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`üìù [${timestamp}] ${req.method} ${req.url}`);
  next();
};
app.use(loggingMiddleware);

// =============================
// Database Configuration
// =============================
let useMongoDB = false;
let User;

// Initial sample users data (matches your screenshot exactly)
const initialUsers = [
  {
    _id: "686fbc457033f674a4840320",
    name: "Alice",
    balance: 1000,
    __v: 0
  },
  {
    _id: "686fbc457033f674a4840321",
    name: "Bob", 
    balance: 500,
    __v: 0
  }
];

// In-memory storage fallback
let users = JSON.parse(JSON.stringify(initialUsers));

// Helper functions for in-memory operations
function findUserById(userId) {
  return users.find(user => user._id === userId);
}

function updateUserBalance(userId, newBalance) {
  const userIndex = users.findIndex(user => user._id === userId);
  if (userIndex !== -1) {
    users[userIndex].balance = newBalance;
    return users[userIndex];
  }
  return null;
}

// =============================
// Try to connect to MongoDB
// =============================
async function initializeDatabase() {
  const MONGODB_URI = "mongodb://localhost:27017/bankingDB";
  
  try {
    await mongoose.connect(MONGODB_URI);
    console.log("‚úÖ Connected to MongoDB successfully");
    useMongoDB = true;
    
    // Define MongoDB Schema and Model
    const userSchema = new mongoose.Schema({
      name: {
        type: String,
        required: true,
        trim: true
      },
      balance: {
        type: Number,
        required: true,
        default: 0,
        min: 0
      }
    }, {
      timestamps: true
    });
    
    User = mongoose.model("User", userSchema);
    console.log("üóÑÔ∏è Using MongoDB for data storage");
    
  } catch (error) {
    console.log("‚ùå MongoDB not available, using in-memory storage");
    console.log("üí° To use MongoDB, make sure it's installed and running");
    useMongoDB = false;
  }
}

// =============================
// Database Operations (MongoDB or In-Memory)
// =============================
async function createSampleUsers() {
  if (useMongoDB) {
    await User.deleteMany({});
    const sampleUsers = [
      { name: "Alice", balance: 1000 },
      { name: "Bob", balance: 500 }
    ];
    return await User.create(sampleUsers);
  } else {
    // Reset to initial users for in-memory storage
    users = JSON.parse(JSON.stringify(initialUsers));
    return users;
  }
}

async function getAllUsers() {
  if (useMongoDB) {
    return await User.find().sort({ name: 1 });
  } else {
    return users;
  }
}

async function findUserByIdDB(userId) {
  if (useMongoDB) {
    return await User.findById(userId);
  } else {
    return findUserById(userId);
  }
}

async function updateUserBalanceDB(userId, newBalance) {
  if (useMongoDB) {
    return await User.findByIdAndUpdate(
      userId, 
      { balance: newBalance }, 
      { new: true }
    );
  } else {
    return updateUserBalance(userId, newBalance);
  }
}

// =============================
// ROUTES
// =============================

// ROOT ROUTE - API Documentation
app.get("/", (req, res) => {
  res.json({
    message: "üè¶ Welcome to Banking Transfer API!",
    database: useMongoDB ? "MongoDB" : "In-Memory Storage",
    endpoints: {
      "POST /create-users": "Create sample users (Alice & Bob)",
      "GET /users": "Get all users",
      "POST /transfer": "Transfer money between users (with balance validation)",
      "GET /users/:id": "Get user by ID"
    },
    test_transfer_success: {
      method: "POST",
      url: "/transfer",
      body: {
        "fromUserId": "686fbc457033f674a4840320",
        "toUserId": "686fbc457033f674a4840321",
        "amount": 150
      }
    },
    test_transfer_failure: {
      method: "POST", 
      url: "/transfer",
      body: {
        "fromUserId": "686fbc457033f674a4840320",
        "toUserId": "686fbc457033f674a4840321",
        "amount": 900
      }
    }
  });
});

// CREATE SAMPLE USERS
app.post("/create-users", async (req, res) => {
  try {
    const createdUsers = await createSampleUsers();
    
    console.log("‚úÖ Sample users created successfully");
    
    res.status(201).json({
      message: "Users created",
      users: createdUsers,
      database: useMongoDB ? "mongodb" : "in-memory"
    });
    
  } catch (error) {
    console.error("‚ùå Error creating users:", error);
    res.status(500).json({
      error: "Internal Server Error",
      message: "Failed to create users"
    });
  }
});

// GET ALL USERS
app.get("/users", async (req, res) => {
  try {
    const users = await getAllUsers();
    
    res.json({
      message: "Users retrieved successfully",
      users: users,
      count: users.length,
      database: useMongoDB ? "mongodb" : "in-memory"
    });
    
  } catch (error) {
    console.error("‚ùå Error fetching users:", error);
    res.status(500).json({
      error: "Internal Server Error",
      message: "Failed to fetch users"
    });
  }
});

// GET USER BY ID
app.get("/users/:id", async (req, res) => {
  try {
    const user = await findUserByIdDB(req.params.id);
    
    if (!user) {
      return res.status(404).json({
        error: "Not Found",
        message: "User not found"
      });
    }
    
    res.json({
      message: "User retrieved successfully",
      user: user
    });
    
  } catch (error) {
    console.error("‚ùå Error fetching user:", error);
    res.status(500).json({
      error: "Internal Server Error",
      message: "Failed to fetch user"
    });
  }
});

// TRANSFER MONEY BETWEEN USERS (CORE EXPERIMENT LOGIC)
app.post("/transfer", async (req, res) => {
  try {
    const { fromUserId, toUserId, amount } = req.body;
    
    // Input validation
    if (!fromUserId || !toUserId || !amount) {
      return res.status(400).json({
        error: "Bad Request",
        message: "fromUserId, toUserId, and amount are required"
      });
    }
    
    if (amount <= 0) {
      return res.status(400).json({
        error: "Bad Request", 
        message: "Amount must be positive"
      });
    }
    
    if (fromUserId === toUserId) {
      return res.status(400).json({
        error: "Bad Request",
        message: "Cannot transfer to the same account"
      });
    }
    
    // Find both users
    const fromUser = await findUserByIdDB(fromUserId);
    const toUser = await findUserByIdDB(toUserId);
    
    // Check if users exist
    if (!fromUser) {
      return res.status(404).json({
        error: "Not Found",
        message: "Sender account not found"
      });
    }
    
    if (!toUser) {
      return res.status(404).json({
        error: "Not Found", 
        message: "Receiver account not found"
      });
    }
    
    // ‚úÖ EXPERIMENT CRITICAL: Check sufficient balance BEFORE updating
    console.log(`üîç Balance check: ${fromUser.name} has $${fromUser.balance}, trying to transfer $${amount}`);
    
    if (fromUser.balance < amount) {
      return res.status(400).json({
        message: "Insufficient balance",
        currentBalance: fromUser.balance,
        requestedAmount: amount
      });
    }
    
    // ‚úÖ EXPERIMENT CRITICAL: Perform sequential updates
    console.log(`üí∏ Starting transfer: $${amount} from ${fromUser.name} to ${toUser.name}`);
    
    // Update sender balance first
    const newSenderBalance = fromUser.balance - amount;
    await updateUserBalanceDB(fromUserId, newSenderBalance);
    console.log(`‚úÖ Updated sender balance: ${fromUser.name} now has $${newSenderBalance}`);
    
    // Then update receiver balance  
    const newReceiverBalance = toUser.balance + amount;
    await updateUserBalanceDB(toUserId, newReceiverBalance);
    console.log(`‚úÖ Updated receiver balance: ${toUser.name} now has $${newReceiverBalance}`);
    
    console.log(`üí∞ Transfer completed: $${amount} from ${fromUser.name} to ${toUser.name}`);
    
    // ‚úÖ SUCCESS RESPONSE (matches your screenshot exactly)
    res.status(200).json({
      message: `Transferred $${amount} from ${fromUser.name} to ${toUser.name}`,
      senderBalance: newSenderBalance,
      receiverBalance: newReceiverBalance,
      database: useMongoDB ? "mongodb" : "in-memory"
    });
    
  } catch (error) {
    console.error("‚ùå Transfer error:", error);
    res.status(500).json({
      error: "Internal Server Error",
      message: "Transfer failed. Please try again."
    });
  }
});

// =============================
// Error Handling
// =============================
app.use((err, req, res, next) => {
  console.error("‚ùå Server Error:", err.message);
  res.status(500).json({
    error: "Internal Server Error",
    message: "Something went wrong on the server"
  });
});

app.use((req, res) => {
  res.status(404).json({
    error: "Route not found",
    message: `The route ${req.method} ${req.url} does not exist`
  });
});

// =============================
// Start Server
// =============================
const PORT = 3000;

async function startServer() {
  await initializeDatabase();
  
  app.listen(PORT, () => {
    console.log(`‚úÖ Banking Transfer API started on port ${PORT}`);
    console.log(`üöÄ Server running on http://localhost:${PORT}`);
    console.log(`üóÑÔ∏è Database: ${useMongoDB ? 'MongoDB' : 'In-Memory Storage'}`);
    console.log(`\nüìã EXPERIMENT TESTING INSTRUCTIONS:`);
    console.log(`   1. Create sample users:`);
    console.log(`      curl -X POST http://localhost:${PORT}/create-users`);
    console.log(`   2. View all users:`);
    console.log(`      curl http://localhost:${PORT}/users`);
    console.log(`   3. Successful transfer ($150):`);
    console.log(`      curl -X POST http://localhost:${PORT}/transfer \\`);
    console.log(`        -H "Content-Type: application/json" \\`);
    console.log(`        -d '{"fromUserId": "686fbc457033f674a4840320", "toUserId": "686fbc457033f674a4840321", "amount": 150}'`);
    console.log(`   4. Failed transfer - insufficient balance ($900):`);
    console.log(`      curl -X POST http://localhost:${PORT}/transfer \\`);
    console.log(`        -H "Content-Type: application/json" \\`);
    console.log(`        -d '{"fromUserId": "686fbc457033f674a4840320", "toUserId": "686fbc457033f674a4840321", "amount": 900}'`);
    console.log(`\nüë§ Pre-configured User IDs (for testing):`);
    console.log(`   Alice: 686fbc457033f674a4840320`);
    console.log(`   Bob: 686fbc457033f674a4840321`);
  });
}






// test-transfer.js








const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testTransferSystem() {
  try {
    console.log('üß™ Testing Banking Transfer System with MongoDB...\n');

    // 1. Create sample users
    console.log('1. Creating sample users in MongoDB...');
    const createResponse = await axios.post(`${BASE_URL}/create-users`);
    console.log('‚úÖ', createResponse.data.message);
    
    const users = createResponse.data.users;
    const alice = users.find(u => u.name === 'Alice');
    const bob = users.find(u => u.name === 'Bob');
    
    console.log(`   üìä Initial Balances:`);
    console.log(`   üë© Alice: $${alice.balance} (ID: ${alice._id})`);
    console.log(`   üë® Bob: $${bob.balance} (ID: ${bob._id})\n`);

    // 2. Test successful transfer
    console.log('2. Testing SUCCESSFUL transfer ($150 from Alice to Bob)...');
    try {
      const transfer1 = await axios.post(`${BASE_URL}/transfer`, {
        fromUserId: alice._id,
        toUserId: bob._id,
        amount: 150
      });
      console.log('‚úÖ', transfer1.data.message);
      console.log(`   üìä New Balances: Alice=$${transfer1.data.senderBalance}, Bob=$${transfer1.data.receiverBalance}\n`);
    } catch (error) {
      console.log('‚ùå Unexpected error:', error.response?.data?.message || error.message);
    }

    // 3. Test insufficient balance
    console.log('3. Testing INSUFFICIENT BALANCE ($900 from Alice to Bob)...');
    try {
      const transfer2 = await axios.post(`${BASE_URL}/transfer`, {
        fromUserId: alice._id,
        toUserId: bob._id,
        amount: 900
      });
      console.log('‚ùå Transfer should have failed but succeeded:', transfer2.data.message);
    } catch (error) {
      console.log('‚úÖ Expected failure:', error.response?.data?.message);
      console.log(`   üí∞ Current balance: $${error.response?.data?.currentBalance}`);
      console.log(`   üí∏ Requested amount: $${error.response?.data?.requestedAmount}\n`);
    }

    // 4. View final balances
    console.log('4. Checking final balances from MongoDB...');
    const usersResponse = await axios.get(`${BASE_URL}/users`);
    console.log('   üìä Final Balances:');
    usersResponse.data.users.forEach(user => {
      console.log(`   ${user.name}: $${user.balance}`);
    });

    console.log('\nüéØ EXPERIMENT RESULTS:');
    console.log('   ‚úì MongoDB database operations working');
    console.log('   ‚úì Balance validation preventing overdrafts');
    console.log('   ‚úì Multi-document updates without transactions');
    console.log('   ‚úì Logical consistency maintained');

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data?.message || error.message);
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  testTransferSystem();
}

module.exports = testTransferSystem;
startServer();








// package.json






{
  "name": "banking-transfer-api",
  "version": "1.0.0",
  "description": "Bank Account Transfer System with MongoDB Fallback",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js",
    "test": "node test-transfer.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0"
  }
}
