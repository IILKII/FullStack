//App.jsx





import { useState } from 'react'
import './App.css'

function App() {
  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });
  
  const [errors, setErrors] = useState({
    username: '',
    password: ''
  });
  
  const [consoleLogs, setConsoleLogs] = useState([]);
  const [showSuccess, setShowSuccess] = useState(false);
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
    
    // Hide success message when form changes
    if (showSuccess) {
      setShowSuccess(false);
    }
  };
  
  const validateForm = () => {
    let valid = true;
    const newErrors = { username: '', password: '' };
    
    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
      valid = false;
    }
    
    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
      valid = false;
    }
    
    setErrors(newErrors);
    return valid;
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      // Log to console
      console.log('Login attempt with:', formData);
      
      // Add to our console display
      const timestamp = new Date().toLocaleTimeString();
      setConsoleLogs([
        ...consoleLogs,
        `[${timestamp}] Login attempt - Username: ${formData.username}, Password: ${formData.password}`
      ]);
      
      // Show success message
      setShowSuccess(true);
      
      // Reset form after successful submission
      setFormData({
        username: '',
        password: ''
      });
    } else {
      console.log('Form validation failed');
      const timestamp = new Date().toLocaleTimeString();
      setConsoleLogs([
        ...consoleLogs,
        `[${timestamp}] Form validation failed - Please fill in all fields`
      ]);
    }
  };
  
  const clearConsole = () => {
    setConsoleLogs([]);
  };
  
  return (
    <div className="container">
      <div className="header">
        <h1>Login Form</h1>
        <p>React State Management Example</p>
      </div>
      
      <div className="form-container">
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="username">Username</label>
            <input
              type="text"
              id="username"
              name="username"
              value={formData.username}
              onChange={handleInputChange}
              placeholder="Enter your username"
            />
            {errors.username && (
              <div className="error">
                <span className="error-icon">⚠</span> {errors.username}
              </div>
            )}
          </div>
          
          <div className="form-group">
            <label htmlFor="password">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              placeholder="Enter your password"
            />
            {errors.password && (
              <div className="error">
                <span className="error-icon">⚠</span> {errors.password}
              </div>
            )}
          </div>
          
          <button type="submit" className="btn">Login</button>
        </form>
        
        {showSuccess && (
          <div className="success-message">
            Login information logged to console successfully!
          </div>
        )}
        
        <div className="console-output">
          <div className="console-header">
            <div className="console-title">Console Output</div>
            <button className="clear-btn" onClick={clearConsole}>Clear</button>
          </div>
          {consoleLogs.length > 0 ? (
            consoleLogs.map((log, index) => (
              <div key={index}>{log}</div>
            ))
          ) : (
            <div>No logs yet. Submit the form to see logs here.</div>
          )}
        </div>
        
        <div className="instructions">
          <h3>Instructions:</h3>
          <ul>
            <li>Enter a username and password in the form fields</li>
            <li>Click the Login button to submit the form</li>
            <li>If fields are empty, validation errors will appear</li>
            <li>Successful submissions will be logged to the console and displayed below</li>
            <li>Try entering different values to test the form</li>
          </ul>
        </div>
      </div>
    </div>
  );
}








//App.css










* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
  background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
}

.container {
  max-width: 500px;
  width: 100%;
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.header {
  background: linear-gradient(to right, #6a11cb, #2575fc);
  color: white;
  padding: 25px;
  text-align: center;
}

.header h1 {
  font-size: 28px;
  margin-bottom: 10px;
}

.header p {
  opacity: 0.9;
  font-size: 16px;
}

.form-container {
  padding: 30px;
}

.form-group {
  margin-bottom: 20px;
}

label {
  display: block;
  margin-bottom: 8px;
  font-weight: 600;
  color: #333;
}

input {
  width: 100%;
  padding: 14px;
  border: 2px solid #e1e5ee;
  border-radius: 8px;
  font-size: 16px;
  transition: all 0.3s;
}

input:focus {
  border-color: #6a11cb;
  outline: none;
  box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.1);
}

.error {
  color: #e74c3c;
  font-size: 14px;
  margin-top: 5px;
  display: flex;
  align-items: center;
}

.error-icon {
  margin-right: 5px;
  font-weight: bold;
}

.btn {
  background: linear-gradient(to right, #6a11cb, #2575fc);
  color: white;
  border: none;
  padding: 14px 20px;
  width: 100%;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  margin-top: 10px;
}

.btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(106, 17, 203, 0.4);
}

.btn:active {
  transform: translateY(0);
}

.console-output {
  margin-top: 25px;
  background-color: #2c3e50;
  color: #ecf0f1;
  padding: 15px;
  border-radius: 8px;
  font-family: 'Courier New', monospace;
  font-size: 14px;
  max-height: 200px;
  overflow-y: auto;
}

.console-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
  border-bottom: 1px solid #34495e;
  padding-bottom: 8px;
}

.console-title {
  font-weight: bold;
  color: #3498db;
}

.clear-btn {
  background: #e74c3c;
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
}

.success-message {
  background-color: #2ecc71;
  color: white;
  padding: 12px;
  border-radius: 8px;
  margin-top: 15px;
  text-align: center;
}

.instructions {
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 8px;
  margin-top: 20px;
  font-size: 14px;
  color: #555;
  border-left: 4px solid #6a11cb;
}

.instructions h3 {
  margin-bottom: 10px;
  color: #333;
}

.instructions ul {
  padding-left: 20px;
}

.instructions li {
  margin-bottom: 5px;
}

export default App;
